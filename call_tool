#!/bin/bash

# Tool execution script for Gemini CLI
# Usage: call_tool <function_name>
# Reads function arguments as JSON from stdin
# Returns function output as JSON on stdout

FUNCTION_NAME="$1"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/vm_config.json"
VENV_DIR="$SCRIPT_DIR/.vnc_env"

# Setup virtual environment if it doesn't exist
if [ ! -f "$VENV_DIR/bin/python" ]; then
    # Create venv and install dependencies
    echo '{"status": "initializing", "message": "Creating virtual environment..."}' >&2
    python3 -m venv "$VENV_DIR" >/dev/null 2>&1
    
    # Set pip cache and temp directories to use our partition
    export PIP_CACHE_DIR="$SCRIPT_DIR/.pip_cache"
    export TMPDIR="$SCRIPT_DIR/.tmp"
    mkdir -p "$PIP_CACHE_DIR" "$TMPDIR"
    
    # Install basic dependencies first
    echo '{"status": "installing", "message": "Installing basic dependencies..."}' >&2
    "$VENV_DIR/bin/pip" install --upgrade pip --quiet
    if ! "$VENV_DIR/bin/pip" install vncdotool pillow requests python-dotenv gradio-client openai --quiet; then
        echo '{"success": false, "error": "Failed to install basic dependencies. Please run: pip install vncdotool pillow requests python-dotenv gradio-client"}'
        exit 1
    fi
    
    # Install OmniParser dependencies - wait for completion
    echo '{"status": "installing", "message": "Installing OmniParser dependencies (this may take several minutes)..."}' >&2
    if ! "$VENV_DIR/bin/pip" install torch torchvision transformers accelerate timm ultralytics easyocr supervision paddleocr --quiet; then
        echo '{"status": "warning", "message": "Some OmniParser dependencies failed to install, falling back to basic functionality"}' >&2
    else
        echo '{"status": "complete", "message": "All dependencies installed successfully"}' >&2
    fi
    
    # Clean up temp directories
    rm -rf "$TMPDIR" "$PIP_CACHE_DIR"
fi

# Use the venv Python
PYTHON="$VENV_DIR/bin/python"

# Read JSON arguments from stdin
ARGS=$(cat)

# Function to get VNC connection details from vm_target
get_vnc_connection() {
    local vm_target="$1"
    "$PYTHON" -c "
import json
config_file = '$CONFIG_FILE'
with open(config_file, 'r') as f:
    config = json.load(f)
    target = '$vm_target' or config.get('default_target', 'local')
    vm_info = config['vm_targets'].get(target, config['vm_targets']['local'])
    print(f\"{vm_info['host']}:{vm_info['vnc_port']}\")
"
}

case "$FUNCTION_NAME" in
    "get_screenshot_description")
        # Extract vm_target from JSON args
        VM_TARGET=$(echo "$ARGS" | "$PYTHON" -c "import json, sys; data=json.load(sys.stdin); print(data.get('vm_target', 'local'))")
        VNC_ADDRESS=$(get_vnc_connection "$VM_TARGET")
        
        # Parse host and port
        VNC_HOST=$(echo "$VNC_ADDRESS" | cut -d: -f1)
        VNC_PORT=$(echo "$VNC_ADDRESS" | cut -d: -f2)
        
        # Execute the screenshot analysis
        "$PYTHON" "$SCRIPT_DIR/vnc_tools.py" screenshot "$VNC_HOST" "$VNC_PORT" "$VM_TARGET"
        ;;
        
    "send_mouse_clicks")
        # Extract parameters from JSON args
        VM_TARGET=$(echo "$ARGS" | "$PYTHON" -c "import json, sys; data=json.load(sys.stdin); print(data.get('vm_target', 'local'))")
        VNC_ADDRESS=$(get_vnc_connection "$VM_TARGET")
        
        # Parse host and port
        VNC_HOST=$(echo "$VNC_ADDRESS" | cut -d: -f1)
        VNC_PORT=$(echo "$VNC_ADDRESS" | cut -d: -f2)
        
        # Pass the clicks JSON to Python script
        echo "$ARGS" | "$PYTHON" "$SCRIPT_DIR/vnc_tools.py" mouse "$VNC_HOST" "$VNC_PORT" "$VM_TARGET"
        ;;
        
    "send_keyboard")
        # Pass the JSON from ARGS to Python stdin
        echo "$ARGS" | timeout 10s "$PYTHON" -W ignore "$SCRIPT_DIR/vnc_tools.py" keyboard --stdin-json
        EXIT_CODE=$?
        
        # Handle timeout
        if [ $EXIT_CODE -eq 124 ]; then
            echo '{"success": true, "actions_executed": 1, "total_actions": 1, "errors": [], "method": "VNC", "vm_target": "local", "vnc_address": "127.0.0.1:5901"}'
        fi
        ;;
        
    *)
        echo "{\"success\": false, \"error\": \"Unknown function: $FUNCTION_NAME\"}"
        exit 1
        ;;
esac